resource "local_file" "inventory" {
  content = <<-DOC
# Ansible inventory containing variable values from Terraform.
# Generated by Terraform.
# ## Configure 'ip' variable to bind kubernetes services on a
# ## different ip than the default iface
# ## We should set etcd_member_name for etcd cluster. The node that is not a etcd member do not need to set the value, or can set the empty string value.
[all]
#node1 ansible_host=${yandex_compute_instance.k8s-cluster[0].network_interface.0.nat_ip_address} ip=${yandex_compute_instance.k8s-cluster[0].network_interface.0.ip_address}
node2 ansible_host=${yandex_compute_instance.k8s-cluster[1].network_interface.0.nat_ip_address} ip=${yandex_compute_instance.k8s-cluster[1].network_interface.0.ip_address}
node3 ansible_host=${yandex_compute_instance.k8s-cluster[2].network_interface.0.nat_ip_address} ip=${yandex_compute_instance.k8s-cluster[2].network_interface.0.ip_address}
cp1 ansible_host=${yandex_compute_instance.k8s-cluster[0].network_interface.0.nat_ip_address} etcd_member_name=etcd1 ip=${yandex_compute_instance.k8s-cluster[0].network_interface.0.ip_address}
#cp2 ansible_host=${yandex_compute_instance.k8s-cluster[1].network_interface.0.nat_ip_address} ip=${yandex_compute_instance.k8s-cluster[1].network_interface.0.ip_address} etcd_member_name=etcd2
#cp3 ansible_host=${yandex_compute_instance.k8s-cluster[2].network_interface.0.nat_ip_address} ip=${yandex_compute_instance.k8s-cluster[2].network_interface.0.ip_address} etcd_member_name=etcd3

[all:vars]
ansible_user=centos
#loadbalancer_apiserver.address=${yandex_lb_network_load_balancer.k8s-lb.listener.*.external_address_spec[0].*.address[0]}
#loadbalancer_apiserver.port=6443

# ## configure a bastion host if your nodes are not directly reachable
# [bastion]
# bastion ansible_host=x.x.x.x ansible_user=some_user

[kube_control_plane]
cp1
#cp2
#cp3

[etcd]
cp1
#cp2
#cp3

[kube_node]
#node1
node2
node3

[calico_rr]

[k8s_cluster:children]
kube_control_plane
kube_node
calico_rr

DOC
  filename = "../ansible/netology-cluster/inventory"

  depends_on = [
    yandex_compute_instance.k8s-cluster,
    yandex_lb_network_load_balancer.k8s-lb
  ]
}

resource "null_resource" "debug_inventory" {
  provisioner "local-exec" {
    command = "cat ../ansible/netology-cluster/inventory"
  }

  depends_on = [
    local_file.inventory
  ]

  triggers = {
      always_run = "${timestamp()}"
  }
}
